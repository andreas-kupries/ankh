# -*- tcl -*- tcl.tk//DSL tcltest//EN//2.0
## (c) 2021 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## Ankh testsuite
## - API testing
#
## ak hash HASH (string path channel)

kt check Tcl     8.5
kt check tcltest 2

kt local testing ankh

kt source support/util.tcl

# # ## ### ##### ######## ############# #####################
## md4 md5 sha1 sha2 sha3

## md4  : RFC 1320 test vectors

foreach hash {
    md4
    md5
    sha1
    sha2/256
    sha3/256
} {
    tcltest::test ankh-${hash}-string-1.0 "ak hash $hash string, wrong#args" -body {
	ak hash $hash string STR X
    } -returnCodes error -result "wrong # args: should be \"ak hash $hash string str\""

    tcltest::test ankh-${hash}-channel-1.0 "ak hash $hash channel, wrong#args" -body {
	ak hash $hash channel CHAN X
    } -returnCodes error -result "wrong # args: should be \"ak hash $hash channel chan\""

    tcltest::test ankh-${hash}-path-1.0 "ak hash $hash path, wrong#args" -body {
	ak hash $hash path PATH X
    } -returnCodes error -result "wrong # args: should be \"ak hash $hash path path\""

    # File-based vectors ...
    foreach vector [lsort -dict [glob -directory [td]/inputs/$hash *]] {
	set vcase  [file tail $vector]
	set digest [cat [td]/results/$hash/$vcase]
	incr k

	tcltest::test ankh-${hash}-string-2.${k}-$vcase "ak hash $hash string, $vcase" -body {
	    binary encode hex [ak hash $hash string [cat $vector]]
	} -result $digest

	tcltest::test ankh-${hash}-channel-2.${k}-$vcase "ak hash $hash channel, $vcase" -body {
	    binary encode hex [ak hash $hash channel [open $vector rb]]
	} -result $digest

	tcltest::test ankh-${hash}-path-2.${k}-$vcase "ak hash $hash path, $vcase" -body {
	    binary encode hex [ak hash $hash path $vector]
	} -result $digest
    }
    unset k

    # Block vectors 'a'*k, k in {0, ...e, 149}
    set k -1
    foreach digest [split [cat [td]/results/$hash/blocks] \n] {
	if {$digest eq {}} continue

	incr k
	set vector  [string repeat a $k]
	set vecfile [write [td]/[pid] $vector]

	tcltest::test ankh-${hash}-string-3.${k} "ak hash $hash string, a*$k" -body {
	    binary encode hex [ak hash $hash string $vector]
	} -result $digest

	tcltest::test ankh-${hash}-channel-3.${k} "ak hash $hash channel, a*$k" -body {
	    binary encode hex [ak hash $hash channel [open $vecfile rb]]
	} -result $digest

	tcltest::test ankh-${hash}-path-3.${k} "ak hash $hash path, a*$k" -body {
	    binary encode hex [ak hash $hash path $vecfile]
	} -result $digest

	file delete $vecfile
	unset vector vecfile
    }

    # - -- --- ----- -------- ------------- ---------------------
    unset k
}

# # ## ### ##### ######## ############# #####################
cleanupTests
return
