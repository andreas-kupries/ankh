#!/usr/bin/env tclsh

package require csv
lassign $argv logdir
set data $logdir/bench.results
set chan [open $data r]

close stdout
open $logdir/bench.md w

puts |Digest|Method|Bytes|Microseconds|MB/Second|MiB/Second|Microseconds/Byte|
puts |---|---|---:|---:|---:|---:|---:|

set max  {}
set last {}

while {[gets $chan line] > 0} {
    if {$line eq {}} break
    #puts $line
    #puts [csv::split $line]
    lassign [csv::split $line] shell version bench _ title microseconds
    lassign [split $title] digest method size

    set bm [format %.2f [expr {double($size)/double($microseconds)}]]
    # bytes/microsecond
    set mb [format %.4f [expr {double($microseconds)/double($size)}]]
    # microseconds/byte
    set bmi [format %.2f [expr {$bm * 1000000./(1024*1024)}]]
    # megabytes/second (binary megabytes)
    
    if {($digest ne $last) && ($last ne {})} {
	puts ||||||||
    }
    puts |$digest|$method|$size|[format %.3f $microseconds]|$bm|$bmi|$mb|

    if {![dict exists $max $digest] || ($bm > [dict get $max $digest val])} {
	dict set max $digest val $bm
	dict set max $digest def [list $method $size [format %.3f $microseconds] $bmi $mb]
    }
    set last $digest
}

set maxima {}
dict for {digest max} $max {
    lappend maxima [list $digest [dict get $max val] {*}[dict get $max def]]
}

set defs [lsort -increasing -real -index 1 $maxima]

set prev  [lindex $defs 0 1]
set worst [lindex $defs 0 1]
set gain  {}
foreach def $defs {
    lassign $def digest bm 
    set rgain [format %.3f [expr {$bm/$prev }]]
    set again [format %.3f [expr {$bm/$worst}]]
    dict set gain $digest [list $rgain $again]
    set prev $bm
}

puts "# Maxima"

puts |Digest|Method|Bytes|Micros|MB/Second|MiB/Second|Micros/Byte|Gain|R/Gain|
puts |---|---|---:|---:|---:|---:|---:|---:|---:|

foreach def [lreverse $defs] {
    lassign $def digest bm method size micro bmi mb
    lassign [dict get $gain $digest] rgain again
    puts |$digest|$method|$size|$micro|$bm|$bmi|$mb|$again|$rgain|
}
exit
